package pl.wendigo.chrome.protocol

import kotlinx.serialization.Serializable
import pl.wendigo.chrome.api.target.SessionID
import pl.wendigo.chrome.protocol.websocket.EventResponseFrame

/**
 * Represents event that can be generated by Chrome's debugger.
 */
interface Event {
    /**
     * Returns event name as described in protocol.
     */
    fun eventName(): String

    /**
     * Returns domain name for which event was generated.
     */
    fun domain(): String

    companion object {
        /**
         * Creates parameterless [Event] for given name (protocol domain + event name)
         */
        internal fun fromFrame(eventFrame: EventResponseFrame) = eventFrame.eventName.split(".", limit = 2, ignoreCase = true).run {
            RawEvent(domain = this[0], eventName = this[1], sessionId = eventFrame.sessionId)
        }
    }
}

/**
 * Represents parameterless [Event] that does not contain any parameters.
 */
@Serializable
class RawEvent(
    private val domain: String,
    private val eventName: String,
    private val sessionId: SessionID?
) : Event {
    override fun domain(): String = domain

    override fun eventName(): String = eventName

    fun sessionId(): SessionID? = sessionId

    override fun toString(): String {
        return "RawEvent(domain='$domain', eventName='$eventName')"
    }
}
