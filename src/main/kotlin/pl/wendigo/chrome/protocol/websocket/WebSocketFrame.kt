package pl.wendigo.chrome.protocol.websocket

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonElement
import pl.wendigo.chrome.api.target.SessionID

/**
 * Represents different protocol frame types exchanged over WebSocket connection to the debugger.
 */
@Serializable
sealed class WebSocketFrame

/**
 * Frame that is generated in response to method call.
 */
interface ResponseFrame {
    fun matches(request: RequestFrame): Boolean
}

/**
 * Represents frame carrying event generated by protocol.
 */
@Serializable
data class EventResponseFrame(
    @SerialName("method")
    val eventName: String,
    @SerialName("params")
    val params: JsonElement,
    val sessionId: SessionID? = null
) : WebSocketFrame() {
    fun matches(eventName: String, sessionId: SessionID?): Boolean = this.eventName == eventName && this.sessionId == sessionId
    fun matches(sessionId: SessionID?): Boolean = this.sessionId == sessionId
}

/**
 * Represents frame carrying method call error response generated by protocol.
 */
@Serializable
data class ErrorResponseFrame(
    val id: Long,
    val error: RequestError,
    val sessionId: SessionID? = null
) : WebSocketFrame(), ResponseFrame {
    override fun matches(request: RequestFrame): Boolean = id == request.id && sessionId == request.sessionId
}

/**
 * Represents frame carrying method call response generated by protocol.
 */
@Serializable
data class RequestResponseFrame(
    val id: Long,
    val result: JsonElement,
    val sessionId: SessionID? = null
) : WebSocketFrame(), ResponseFrame {
    override fun matches(request: RequestFrame): Boolean = id == request.id && sessionId == request.sessionId
}
