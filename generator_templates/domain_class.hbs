package {{Package}}.api.{{Domain.LowerName}}

/**
 *{{#if Domain.Description}}{{{trim Domain.Description}}}{{else}} {{Domain.Name}}Operations represents {{Domain.Name}} protocol domain request/response operations and events that can be captured.{{/if}}
 *
{{#if Domain.Experimental}}
 * This API is marked as experimental in protocol definition and can change in the future.
{{/if}}
 * @link Protocol [{{Domain.Name}}](https://chromedevtools.github.io/devtools-protocol/tot/{{Domain.Name}}) domain documentation.
 */
{{#if Domain.Deprecated}}
@Deprecated(level = DeprecationLevel.WARNING, message = "{{#if Domain.Description}}{{{Domain.Description}}}{{else}}{{Domain.Name}} is deprecated.{{/if}}")
{{/if}}
{{#if Domain.Experimental}}
@{{Package}}.protocol.Experimental
{{/if}}
class {{Domain.Name}}Operations internal constructor(private val connection : {{Package}}.protocol.ChromeDebuggerConnection) {
{{#each Domain.Commands}}
    /**
     *{{{trim Description}}}
     *
     * @link Protocol [{{Domain.Name}}#{{Name}}](https://chromedevtools.github.io/devtools-protocol/tot/{{Domain.Name}}#method-{{Name}}) method documentation.
     */
    {{#if Deprecated}}
    @Deprecated(level = DeprecationLevel.WARNING, message = "{{Name}} is deprecated.")
    {{/if}}
    {{#if Experimental}}
    @{{Package}}.protocol.Experimental
    {{/if}}
    fun {{Name}}({{#if HasInputParams}}input: {{SimpleName}}Request{{/if}}) = connection.request("{{Domain}}.{{Name}}", {{#if HasInputParams}}input{{else}}null{{/if}}, {{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.protocol.ResponseFrame{{/if}}::class.java)


{{/each}}
{{#each Domain.Events}}
    /**
     * {{#if Description}}{{{trim Description}}}{{else}} Returns observable capturing all {{Domain.Name}}.{{Name}} events.{{/if}}
     */
    fun {{Name}}(): io.reactivex.Flowable<{{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.protocol.Event{{/if}}> = connection.events("{{Domain.Name}}.{{Name}}", {{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.protocol.Event{{/if}}::class.java);

{{/each}}

    /**
     * Returns flowable capturing all {{Domain.Name}} domains events.
     */
    fun events() : io.reactivex.Flowable<{{Package}}.protocol.Event> {
        return connection.allEvents().filter {
            it.protocolDomain() == "{{Domain.Name}}"
        }
    }
}
{{#each Domain.Commands}}
{{{InputDataClass}}}
{{{OutputDataClass}}}
{{/each}}
{{#each Domain.Events}}
{{{OutputDataClass}}}
{{/each}}
