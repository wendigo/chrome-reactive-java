package {{Package}}.domain.{{Domain.LowerName}}

/**
 *{{#if Domain.Description}}{{{trim Domain.Description}}}{{else}} {{Domain.Name}}Domain represents remote debugger protocol domain.{{/if}}
 */
class {{Domain.Name}}Domain internal constructor(private val connectionRemote : {{Package}}.DebuggerProtocol) {
{{#each Domain.Commands}}
    /**
     *{{{trim Description}}}
     */
    fun {{Name}}({{#if HasInputParams}}input: {{SimpleName}}Request{{/if}}): io.reactivex.Single<{{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.ResponseFrame{{/if}}> {
        return connectionRemote.runAndCaptureResponse("{{Domain}}.{{Name}}", {{#if HasInputParams}}input{{else}}null{{/if}}, {{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.ResponseFrame{{/if}}::class.java).map {
            it.value()
        }
    }

{{/each}}
{{#each Domain.Events}}
    /**
     * {{#if Description}}{{{trim Description}}}{{else}}Returns observable capturing all {{Domain.Name}}.{{Name}} events.{{/if}}
     */
    fun {{Name}}(): io.reactivex.Flowable<{{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.ProtocolEvent{{/if}}> {
        return {{Name}}Timed().map {
            it.value()
        }
    }

    /**
     *{{#if Description}}{{{trim Description}}}{{else}} Returns observable capturing all {{Domain.Name}}.{{Name}} events.{{/if}}
     */
    fun {{Name}}Timed(): io.reactivex.Flowable<io.reactivex.schedulers.Timed<{{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.ProtocolEvent{{/if}}>> {
        return connectionRemote.captureEvents("{{Domain.Name}}.{{Name}}", {{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.ProtocolEvent{{/if}}::class.java)
    }

{{/each}}

    /**
     * Returns flowable capturing all {{Domain.Name}} domains events.
     */
    fun events() : io.reactivex.Flowable<{{Package}}.ProtocolEvent> {
        return connectionRemote.captureAllEvents().map { it.value() }.filter {
            it.protocolDomain() == "{{Domain.Name}}"
        }
    }
}
{{#each Domain.Commands}}
{{{InputDataClass}}}
{{{OutputDataClass}}}
{{/each}}
{{#each Domain.Events}}
{{{OutputDataClass}}}
{{/each}}
