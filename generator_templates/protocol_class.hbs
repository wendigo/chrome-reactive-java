package {{Package}}

import java.io.Closeable

import io.reactivex.rxjava3.core.Flowable
{{#each Protocol.Domains}}
import {{Package}}.api.{{LowerName}}.{{Name}}Operations
{{/each}}
import {{Package}}.protocol.ChromeDebuggerConnection

/**
 * DevToolsProtocol represents all operations on all domains that can be issued to control Chrome via [DevTools Protocol](https://chromedevtools.github.io/devtools-protocol/).
 *
 * @link [https://github.com/chromedevtools/devtools-protocol](https://github.com/chromedevtools/devtools-protocol)
 * @link [https://chromedevtools.github.io/devtools-protocol/](https://chromedevtools.github.io/devtools-protocol/)
 */
open class DevToolsProtocol internal constructor(internal val connection: ChromeDebuggerConnection): Closeable {

    /**
     * Register events mappings.
     */
    init {
        {{#each Protocol.EventMappings}}
            connection.addEventMapping("{{EventName}}", {{Class}}::class.java)
        {{/each}}
    }

    {{#each Protocol.Domains}}
    /**
     * {{#if Description}}{{{Description}}}{{else}}Lazily returns [{{Name}}Operations] domain object allowing to perform operations on [{{Name}}](https://chromedevtools.github.io/devtools-protocol/tot/{{Name}}) protocol domain.{{/if}}
     *
     {{#if Experimental}}
      * This API is marked as experimental in protocol definition and can change in the future.
     {{/if}}
     * @link [https://chromedevtools.github.io/devtools-protocol/tot/{{Name}}](Domain {{Name}} documentation)
     */
{{#if Deprecated}}
    @Deprecated(level = DeprecationLevel.WARNING, message = "{{#if Description}}{{{Description}}}{{else}}{{Name}} is deprecated.{{/if}}")
{{/if}}
{{#if Experimental}}
    @{{Package}}.protocol.Experimental
{{/if}}
    val {{Name}}: {{Name}}Operations by lazy {
        {{Name}}Operations(connection)
    }

    {{/each}}
    /**
     * Returns [Flowable] capturing all events.
     */
    fun Events(): Flowable<{{Package}}.protocol.Event> {
        return connection.allEvents()
    }

    /**
     * Closes target.
     */
    override fun close() {
        return connection.close()
    }
}