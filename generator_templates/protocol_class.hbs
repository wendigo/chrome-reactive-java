package {{Package}}

import java.io.Closeable

/**
 * ChromeProtocol represents session established with given inspectablePage via chrome's remote debugging protocol.
 */
open class ChromeProtocol internal constructor(private val api: DebuggerProtocol): Closeable {

    /**
     * Register event eventNameToClassMapping
     */
    init {
        api.registerEventMappings(mapOf(
        {{#each Protocol.EventMappings}}
            "{{EventName}}" to {{Class}}::class.java{{#unless @last}},{{/unless}}
        {{/each}}
        ))
    }

    {{#each Protocol.Domains}}
    /**
     * {{#if Description}}{{{Description}}}{{else}}Returns {{Name}} domain object.{{/if}}
     */
    val {{Name}} : {{Package}}.domain.{{LowerName}}.{{Name}}Domain by lazy {
        {{Package}}.domain.{{LowerName}}.{{Name}}Domain(api)
    }

    {{/each}}
    /**
     * Returns flowable capturing all events.
     */
    fun Events() : io.reactivex.Flowable<ProtocolEvent> {
        return api.captureAllEvents().map {
            it.value()
        }
    }

    /**
     * Closes debugging session.
     */
    override fun close() {
        return api.close()
    }
}